# Concatenate local fips to create state-county-tract fips code
if(cb){
tractmap$fips = paste0(tractmap$STATE, tractmap$COUNTY, tractmap$TRACT)
if(yr==2000){
tractmap = tractmap[, c("AREA", "fips")]
}else if(yr==2010){
tractmap = tractmap[, c("CENSUSAREA", "fips")]
}
}else {
}
tractmap@data
# Rename columns
if(cl=="sf"){
colnames(tractmap) = c("area", "fips", "geometry")
}else if(cl=="sp"){
colnames(tractmap@data) = c("area", "fips")
}
tractmap@data
cb
cb=FALSE
coliter = cols[[paste0("cols", cb, yr)]]
if(cl=="sf"){
coliter = c(coliter, "geometry")
}
tractmap = tigris::tracts(state=state.abb[i],
cb=cb,
year=yr,
class=cl)[, coliter]
tractmap@data
# Rename columns
if(cl=="sf"){
colnames(tractmap) = c("area", "fips", "geometry")
}else if(cl=="sp"){
colnames(tractmap@data) = c("area", "fips")
}
tractmap@data
head(tractmap@data)
cl="sf"
coliter = cols[[paste0("cols", cb, yr)]]
if(cl=="sf"){
coliter = c(coliter, "geometry")
}
tractmap = tigris::tracts(state=state.abb[i],
cb=cb,
year=yr,
class=cl)[, coliter]
# Concatenate local fips to create state-county-tract fips code
if(cb){
tractmap$fips = paste0(tractmap$STATE, tractmap$COUNTY, tractmap$TRACT)
if(yr==2000){
tractmap = tractmap[, c("AREA", "fips")]
}else if(yr==2010){
tractmap = tractmap[, c("CENSUSAREA", "fips")]
}
}
# Rename columns
if(cl=="sf"){
colnames(tractmap) = c("area", "fips", "geometry")
}else if(cl=="sp"){
colnames(tractmap@data) = c("area", "fips")
}
tractmap
object.size(tractmap)
pryr::mem_used()
cl
cl="sp"
coliter = cols[[paste0("cols", cb, yr)]]
if(cl=="sf"){
coliter = c(coliter, "geometry")
}
tractmap = tigris::tracts(state=state.abb[i],
cb=cb,
year=yr,
class=cl)[, coliter]
# Concatenate local fips to create state-county-tract fips code
if(cb){
tractmap$fips = paste0(tractmap$STATE, tractmap$COUNTY, tractmap$TRACT)
if(yr==2000){
tractmap = tractmap[, c("AREA", "fips")]
}else if(yr==2010){
tractmap = tractmap[, c("CENSUSAREA", "fips")]
}
}
# Rename columns
if(cl=="sf"){
colnames(tractmap) = c("area", "fips", "geometry")
}else if(cl=="sp"){
colnames(tractmap@data) = c("area", "fips")
}
# Save into global environment
if(i==1){
assign(outname, tractmap, envir=.GlobalEnv)
}else{
assign(outname, rbind(get(outname), tractmap), envir=.GlobalEnv)
}
cb
yr
cl
outname
shp_map = fortify(get(outname))
library(ggplot2)
?fortify
shp_map = ggplot2::fortify(get(outname))
shp_map
suppress_messages(shp_map = ggplot2::fortify(get(outname)))
suppressMessages(shp_map = ggplot2::fortify(get(outname)))
suppressMessages(shp_map <- ggplot2::fortify(get(outname)))
shp_map
get(outname)@data
suppressMessages(shp_map <- ggplot2::fortify(get(outname)))
shp_dt = data.table(get(outname)@data)
shp_dt = get(outname)@data
shp_dt
head(shp_dt)
shp_dt = get(outname)@data
shp_dt$id = rownames(shp_dt)
shp_dt
test = merge(shp_map, shp_dt, by="id", all.x=TRUE)
test
object.size(test)
rownames(shp_dt) = c()
rownames(test) = c()
object.size(test)
test
suppressMessages(shp_map <- ggplot2::fortify(get(outname)))
shp_dt = get(outname)@data
shp_dt$id = rownames(shp_dt)
object.size(shp_dt)
rownames(shp_dt) = c()
object.size(shp_dt)
test
test$id = c()
test
shp_map
gc()
rm(list=ls())
cols = list()
cols[["colsTRUE2000"]]  = c("AREA", "STATE", "COUNTY", "TRACT")
cols[["colsFALSE2000"]] = c("ALAND00", "CTIDFP00")
cols[["colsTRUE2010"]]  = c("CENSUSAREA", "STATE", "COUNTY", "TRACT")
cols[["colsFALSE2010"]] = c("ALAND10", "GEOID10")
load_merge_tracts = function(cb, yr, cl, outname){
coliter = cols[[paste0("cols", cb, yr)]]
if(cl=="sf"){
coliter = c(coliter, "geometry")
}
for(i in 1:length(state.abb)){
tractmap = tigris::tracts(state=state.abb[i],
cb=cb,
year=yr,
class=cl)[, coliter]
# Concatenate local fips to create state-county-tract fips code
if(cb){
tractmap$fips = paste0(tractmap$STATE, tractmap$COUNTY, tractmap$TRACT)
if(yr==2000){
tractmap = tractmap[, c("AREA", "fips")]
}else if(yr==2010){
tractmap = tractmap[, c("CENSUSAREA", "fips")]
}
}
# Rename columns
if(cl=="sf"){
colnames(tractmap) = c("area", "fips", "geometry")
}else if(cl=="sp"){
colnames(tractmap@data) = c("area", "fips")
}
# Save into global environment
if(i==1){
assign(outname, tractmap, envir=.GlobalEnv)
}else{
assign(outname, rbind(get(outname), tractmap), envir=.GlobalEnv)
}
}
# If class=="sp" then the file must be fortified into a data.frame format
if(cl=="sp"){
suppressMessages(shp_map <- ggplot2::fortify(get(outname)))
shp_dt = get(outname)@data
shp_dt$id = rownames(shp_dt)
rownames(shp_dt) = c()
shp_map = merge(shp_map, shp_dt, by="id", all.x=TRUE)
shp_map$id = c()
assign(outname, shp_map, envir=.GlobalEnv)
gc()
}
}
# Function to load county maps
load_counties = function(cb, yr, cl, outname){
countymap = tigris::counties(cb=cb, year=yr, class=cl)
assign(outname, countymap, envir=.GlobalEnv)
}
# Wrapper for state and county loading
geo_wrapper = function(vec){
geo = as.character(vec[1])
cb  = as.logical(vec[2])
yr  = as.integer(vec[3])
cl  = as.character(vec[4])
outname = vec[5]
cat(geo, cb, yr, cl)
if(geo=="tracts"){
load_merge_tracts(cb, yr, cl, outname)
}else if(geo=="counties"){
load_counties(cb, yr, cl, outname)
}
}
# Load state abbreviations, adding DC
data(state)
#state.abb = c(state.abb, "DC")
state.abb = "IN"
# Find cartesian product of values to loop through
target = expand.grid(geo   = c("tracts", "counties"),
cb    = c(TRUE, FALSE),
yr    = c(2000, 2010),
class = c("sf", "sp"),
stringsAsFactors=FALSE)
target$outname = paste0(target$geo,
target$yr,
target$cb,
target$cl)
apply(target, 1, geo_wrapper)
target
usethis::edit_r_profile()
load_all()
library(usethis)
load_all()
library(devtools)
load_all()
getwd()
setwd("C:/Users/hab737/GitHub/smoov")
library(usethis)
library(devtools)
load_all()
install.packages("roxygen")
install.packages("roxygen2")
library(roxygen2)
load_all()
geo_alias = data.frame(
name = c("states",
"states",
"counties",
"counties",
"tracts",
"tracts"),
alias = c("states",
"state",
"counties",
"county",
"tracts",
"tract")
)
usethis::use_data(
geo_alias,
internal=TRUE,
overwrite=TRUE
)
rm(geo_alias)
load_all()
load_all()
usethis::load_all()
devtools::load_all()
install.packages("available")
library(available)
available("smoov")
getwd()
proj_sitrep()
load_all()
library(devtools)
load_all()
load_all()
load_all()
load_all()
# Plot of all US counties
smoov("counties")
load_all()
# Plot of all US counties
smoov("counties")
# Plot
smoov("tracts", states=c(17,17,18), counties=c(31,43,89)) +
labs(title="Cook and DuPage Counties (IL)") +
theme(plot.title = element_text(size=20, face="bold", hjust = 0.5))
library(ggplot2)
# Plot
smoov("tracts", states=c(17,17,18), counties=c(31,43,89)) +
labs(title="Cook and DuPage Counties (IL)") +
theme(plot.title = element_text(size=20, face="bold", hjust = 0.5))
# Plot
smoov("tracts", states=c(17,17,18), counties=c(31,43,89)) +
labs(title="Cook and DuPage Counties (IL), Lake County (IN)") +
theme(plot.title = element_text(size=20, face="bold", hjust = 0.5))
?labs
# Plot
smoov("tracts", states=c(17,17,18), counties=c(31,43,89)) +
labs(title="Cook and DuPage Counties (IL), Lake County (IN)") +
theme(plot.title = element_text(size=20, face="bold", hjust = 0.5))
# Plot Chicago surroundings
smoov(geo="tracts", states=17, counties=c(31,43))
# Plot all US counties
smoov("counties")
usethis::edit_r_environ()
Sys.getenv("NHGIS")
library(httr)
library(jsonlite)
getwd()
smoovpath = "C:/Users/hab737/GitHub/smoov"
df
dt
?dt
?df
?DT
geo = "county"
dt_geo = read.csv(file.path(smoovpath,
"data-raw",
paste0("nhgis_",geo, ".csv")))
dt_geo
library(data.table)
dt_geo = data.table::fread(file.path(smoovpath,
"data-raw",
paste0("nhgis_", geo, ".csv")))
toupper()
toupper("statea")
keep_cols = c("AJWME001",
"AJXCE001",
"AJXCE002",
"AJXCE010",
"AJXCE016",
"AJXCE017",
"AJXCE018",
"AJXCE019",
"AJXCE020",
"AJXCE021")
# Descriptive names for columns to keep
new_names = c("pop_total",
"pop_workers",
"commute_car",
"commute_public",
"commute_taxi",
"commute_mcycle",
"commute_bcycle",
"commute_walked",
"commute_other",
"commute_stayhome")
geo="state"
# Add column geography names in each iteration
keep_cols = c(toupper(paste0(geo, "A")),keep_cols)
new_names = c(geo, new_names)
dt_geo = read.csv(file.path(smoovpath,
"data-raw",
paste0("nhgis_", geo, ".csv")))
dt_geo = dt_geo[, colnames(dt_geo)%in%keep_cols]
dt_geo
colnames(dt_geo) = new_names
dt_geo
?data
?save
pos
?assign
?save
?use_data_raw()
library(usethis)
?use_data_raw()
use_data_raw()
source('C:/Users/hab737/GitHub/smoov/data-raw/DATASET.R')
get(paste0(geo ,"_commute_types"))
usethis::use_data(eval(paste0(geo ,"_commute_types")), overwrite = TRUE)
usethis::use_data(parse(paste0(geo ,"_commute_types")), overwrite = TRUE)
?local
source('C:/Users/hab737/GitHub/smoov/data-raw/DATASET.R')
length(new_names)
length(keep_cols)
geo
smoovpath = "C:/Users/hab737/GitHub/smoov"
# Columns to keep
keep_cols = c("AJWME001",
"AJXCE001",
"AJXCE002",
"AJXCE010",
"AJXCE016",
"AJXCE017",
"AJXCE018",
"AJXCE019",
"AJXCE020",
"AJXCE021")
# Descriptive names for columns to keep
new_names = c("pop_total",
"pop_workers",
"commute_car",
"commute_public",
"commute_taxi",
"commute_mcycle",
"commute_bcycle",
"commute_walked",
"commute_other",
"commute_stayhome")
geo = state
geo = "state"
# Add column geography names in each iteration
keep_cols = c(toupper(paste0(geo, "A")),keep_cols)
new_names = c(geo, new_names)
# Read in dataset from .csv
dt_geo = read.csv(file.path(smoovpath,
"data-raw",
paste0("nhgis_", geo, ".csv")))
# Subset by and rename columns
dt_geo = dt_geo[, colnames(dt_geo)%in%keep_cols]
colnames(dt_geo) = new_names
# Output as .rda file
assign(paste0(geo ,"_commute_types"), dt_geo)
state_commute_types
geo = "county"
# Add column geography names in each iteration
keep_cols = c(toupper(paste0(geo, "A")),keep_cols)
new_names = c(geo, new_names)
# Read in dataset from .csv
dt_geo = read.csv(file.path(smoovpath,
"data-raw",
paste0("nhgis_", geo, ".csv")))
# Subset by and rename columns
dt_geo = dt_geo[, colnames(dt_geo)%in%keep_cols]
dt_geo
colnames(dt_geo) = new_names
# Output as .rda file
assign(paste0(geo ,"_commute_types"), dt_geo)
# Add column geography names in each iteration
keep_cols = c(toupper(paste0(geo, "A")),keep_cols)
geo = "tract"
# Add column geography names in each iteration
keep_cols = c(toupper(paste0(geo, "A")),keep_cols)
new_names = c(geo, new_names)
# Read in dataset from .csv
dt_geo = read.csv(file.path(smoovpath,
"data-raw",
paste0("nhgis_", geo, ".csv")))
dt_geo
rm(list=ls())
smoovpath = "C:/Users/hab737/GitHub/smoov"
# Columns to keep
keep_cols = c("AJWME001",
"AJXCE001",
"AJXCE002",
"AJXCE010",
"AJXCE016",
"AJXCE017",
"AJXCE018",
"AJXCE019",
"AJXCE020",
"AJXCE021")
# Descriptive names for columns to keep
new_names = c("pop_total",
"pop_workers",
"commute_car",
"commute_public",
"commute_taxi",
"commute_mcycle",
"commute_bcycle",
"commute_walked",
"commute_other",
"commute_stayhome")
geo= "state"
keep_cols = c(toupper(paste0(geo, "A")), keep_cols)
new_names = c(geo, new_names)
# Read in dataset from .csv
dt_geo = read.csv(file.path(smoovpath,
"data-raw",
paste0("nhgis_", geo, ".csv")))
# Subset by and rename columns
dt_geo = dt_geo[, colnames(dt_geo)%in%keep_cols]
colnames(dt_geo) = new_names
# Output as .rda file
assign(paste0(geo ,"_commute_types"), dt_geo)
geo = "county"
keep_cols = c(toupper(paste0(geo, "A")), keep_cols)
new_names = c(geo, new_names)
# Read in dataset from .csv
dt_geo = read.csv(file.path(smoovpath,
"data-raw",
paste0("nhgis_", geo, ".csv")))
# Subset by and rename columns
dt_geo = dt_geo[, colnames(dt_geo)%in%keep_cols]
colnames(dt_geo) = new_names
# Output as .rda file
assign(paste0(geo ,"_commute_types"), dt_geo)
geo = "tract"
keep_cols = c(toupper(paste0(geo, "A")), keep_cols)
new_names = c(geo, new_names)
# Read in dataset from .csv
dt_geo = read.csv(file.path(smoovpath,
"data-raw",
paste0("nhgis_", geo, ".csv")))
# Subset by and rename columns
dt_geo = dt_geo[, colnames(dt_geo)%in%keep_cols]
colnames(dt_geo) = new_names
# Output as .rda file
assign(paste0(geo ,"_commute_types"), dt_geo)
dt_geo
dt_geo
keep_cols
gsub("E", "M", keep_cols[keep_cols!="AJWME001"])
source('C:/Users/hab737/GitHub/smoov/data-raw/DATASET.R')
source('C:/Users/hab737/GitHub/smoov/data-raw/DATASET.R')
rm(list=ls())
data(state_commute_types)
# Plot all US counties
data(county_commute_types)
county_commute_types
load_all()
usethis::load_all()
getwd()
rm(list=ls())
getwd()
library(usethis)
load_all()
usethis::load_all()
devtools::load_all()
