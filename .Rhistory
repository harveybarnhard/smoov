# Perform rank inference on mean neighborhood incomes
source(paste0(path_code, "/8_income_ranks.R"))
# Treat degenerate variances as missing (sometimes fitFunc will do this)
dt_inc[hhinc_mean_var==0, (c("hhinc_mean_var", "hhinc_mean")) := list(NA, NA)]
# Calculate mean household income and variances of sample mean
source(paste0(path_code, "/2_tract_income.R"))
dt[tract==242600]
dt[tract==542700]
# tracts in example
tr_special = c(242600, 542700)
?geom_point
# tracts in example
tr_special = c(242600, 542700)
# Perform tract-level inference with just Watts and Compton tracts =============
temp = dt[nhood%in%c("Compton", "Watts")]
for(outvar in c("kfr", "kfr_bm", "kfr_bf")){
# Conditionally create subtitle for plots
if(outvar=="kfr"){
subiter = "KFR p25 for Pooled Race and Gender"
}else if(outvar=="kfr_bm"){
subiter = "KFR p25 for Black Males"
}else if(outvar=="kfr_bf"){
subiter = "KFR p25 for Black Females"
}
temp2 = temp[!is.na(get(paste0(outvar, "_var")))]
# Create plot for inference on ranks
mean_vec = temp2[, get(paste0(outvar, "_mean"))]
sd_vec   = sqrt(temp2[, get(paste0(outvar, "_var"))])
CS_simul = csranks(x=mean_vec,
sd=sd_vec,
coverage=0.90,
simul=TRUE,
stepdown=TRUE,
cstype="two-sided",
R=1000,
seed=1234)
results = data.table(ranks = xrank(mean_vec),
lower = CS_simul$L,
upper = CS_simul$U,
Neighborhood = temp2$nhood)
# Create plot comparing
g=ggplot(results, aes(x=ranks, y=ranks, color=Neighborhood)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper)) +
geom_point(results[tract%in%tr_special], mapping=aes(x=ranks, y=ranks), color="black") +
coord_flip() +
labs(title="Inference on Ranks of Tract-level KFR in Watts and Compton",
subtitle=subiter,
caption="90% Nominal Coverage")
ggsave(
filename = paste0("watts_compton_tracts_",outvar, ".", outdev),
plot = g,
device=outdev,
path = path_out,
height=8,
width=8
)
# Create plot with standard 90% confidence intervals around tract estimates
temp2 = temp2[order(get(paste0(outvar, "_mean")))]
temp2[, num:=1:.N]
temp2[, lower:=get(paste0(outvar, "_mean")) - 1.645*sqrt(get(paste0(outvar, "_var")))]
temp2[, upper:=get(paste0(outvar, "_mean")) + 1.645*sqrt(get(paste0(outvar, "_var")))]
g=ggplot(temp2, aes(x=num,y=get(paste0(outvar, "_mean")), color=nhood)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper)) +
ylab("KFR p25") +
guides(color=guide_legend(title="Neighborhood")) +
theme(legend.position=c(0.8, 0.2),
axis.text.x=element_blank(),
axis.title.x=element_blank()) +
labs(title="Asymptotic 90% Confidence Intervals for Tracts in Watts and Compton",
subtitle=subiter)
ggsave(
filename = paste0("watts_compton_tracts_",outvar,"_asymp", ".", outdev),
plot = g,
device=outdev,
path = path_out,
height=8,
width=8
)
}
temp2
# tracts in example
tr_special = c(242600, 542700)
# Perform tract-level inference with just Watts and Compton tracts =============
temp = dt[nhood%in%c("Compton", "Watts")]
for(outvar in c("kfr", "kfr_bm", "kfr_bf")){
# Conditionally create subtitle for plots
if(outvar=="kfr"){
subiter = "KFR p25 for Pooled Race and Gender"
}else if(outvar=="kfr_bm"){
subiter = "KFR p25 for Black Males"
}else if(outvar=="kfr_bf"){
subiter = "KFR p25 for Black Females"
}
temp2 = temp[!is.na(get(paste0(outvar, "_var")))]
# Create plot for inference on ranks
mean_vec = temp2[, get(paste0(outvar, "_mean"))]
sd_vec   = sqrt(temp2[, get(paste0(outvar, "_var"))])
CS_simul = csranks(x=mean_vec,
sd=sd_vec,
coverage=0.90,
simul=TRUE,
stepdown=TRUE,
cstype="two-sided",
R=1000,
seed=1234)
results = data.table(ranks = xrank(mean_vec),
lower = CS_simul$L,
upper = CS_simul$U,
Neighborhood = temp2$nhood,
tract = temp2$tract)
# Create plot comparing
g=ggplot(results, aes(x=ranks, y=ranks, color=Neighborhood)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper)) +
geom_point(results[tract%in%tr_special], mapping=aes(x=ranks, y=ranks), color="black") +
coord_flip() +
labs(title="Inference on Ranks of Tract-level KFR in Watts and Compton",
subtitle=subiter,
caption="90% Nominal Coverage")
ggsave(
filename = paste0("watts_compton_tracts_",outvar, ".", outdev),
plot = g,
device=outdev,
path = path_out,
height=8,
width=8
)
# Create plot with standard 90% confidence intervals around tract estimates
temp2 = temp2[order(get(paste0(outvar, "_mean")))]
temp2[, num:=1:.N]
temp2[, lower:=get(paste0(outvar, "_mean")) - 1.645*sqrt(get(paste0(outvar, "_var")))]
temp2[, upper:=get(paste0(outvar, "_mean")) + 1.645*sqrt(get(paste0(outvar, "_var")))]
g=ggplot(temp2, aes(x=num,y=get(paste0(outvar, "_mean")), color=nhood)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper)) +
ylab("KFR p25") +
guides(color=guide_legend(title="Neighborhood")) +
theme(legend.position=c(0.8, 0.2),
axis.text.x=element_blank(),
axis.title.x=element_blank()) +
labs(title="Asymptotic 90% Confidence Intervals for Tracts in Watts and Compton",
subtitle=subiter)
ggsave(
filename = paste0("watts_compton_tracts_",outvar,"_asymp", ".", outdev),
plot = g,
device=outdev,
path = path_out,
height=8,
width=8
)
}
# Perform tract-level inference with just Watts and Compton tracts =============
temp = dt[nhood%in%c("Compton", "Watts")]
for(outvar in c("kfr", "kfr_bm", "kfr_bf")){
# Conditionally create subtitle for plots
if(outvar=="kfr"){
subiter = "KFR p25 for Pooled Race and Gender"
}else if(outvar=="kfr_bm"){
subiter = "KFR p25 for Black Males"
}else if(outvar=="kfr_bf"){
subiter = "KFR p25 for Black Females"
}
temp2 = temp[!is.na(get(paste0(outvar, "_var")))]
# Create plot for inference on ranks
mean_vec = temp2[, get(paste0(outvar, "_mean"))]
sd_vec   = sqrt(temp2[, get(paste0(outvar, "_var"))])
CS_simul = csranks(x=mean_vec,
sd=sd_vec,
coverage=0.90,
simul=TRUE,
stepdown=TRUE,
cstype="two-sided",
R=1000,
seed=1234)
results = data.table(ranks = xrank(mean_vec),
lower = CS_simul$L,
upper = CS_simul$U,
Neighborhood = temp2$nhood,
tract = temp2$tract)
# Create plot comparing
g=ggplot(results, aes(x=ranks, y=ranks, color=Neighborhood)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper)) +
geom_point(results[tract%in%tr_special], mapping=aes(x=ranks, y=ranks, color=nhood), size=2) +
coord_flip() +
labs(title="Inference on Ranks of Tract-level KFR in Watts and Compton",
subtitle=subiter,
caption="90% Nominal Coverage")
ggsave(
filename = paste0("watts_compton_tracts_",outvar, ".", outdev),
plot = g,
device=outdev,
path = path_out,
height=8,
width=8
)
# Create plot with standard 90% confidence intervals around tract estimates
temp2 = temp2[order(get(paste0(outvar, "_mean")))]
temp2[, num:=1:.N]
temp2[, lower:=get(paste0(outvar, "_mean")) - 1.645*sqrt(get(paste0(outvar, "_var")))]
temp2[, upper:=get(paste0(outvar, "_mean")) + 1.645*sqrt(get(paste0(outvar, "_var")))]
g=ggplot(temp2, aes(x=num,y=get(paste0(outvar, "_mean")), color=nhood)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper)) +
ylab("KFR p25") +
guides(color=guide_legend(title="Neighborhood")) +
theme(legend.position=c(0.8, 0.2),
axis.text.x=element_blank(),
axis.title.x=element_blank()) +
labs(title="Asymptotic 90% Confidence Intervals for Tracts in Watts and Compton",
subtitle=subiter)
ggsave(
filename = paste0("watts_compton_tracts_",outvar,"_asymp", ".", outdev),
plot = g,
device=outdev,
path = path_out,
height=8,
width=8
)
}
# Create plot comparing
g=ggplot(results, aes(x=ranks, y=ranks, color=Neighborhood)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper)) +
geom_point(results[tract%in%tr_special], mapping=aes(x=ranks, y=ranks, color=Neighborhood), size=2) +
coord_flip() +
labs(title="Inference on Ranks of Tract-level KFR in Watts and Compton",
subtitle=subiter,
caption="90% Nominal Coverage")
g
# Create plot comparing
g=ggplot(results, aes(x=ranks, y=ranks, color=Neighborhood)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper)) +
geom_point(results[tract%in%tr_special], mapping=aes(x=ranks, y=ranks, color=Neighborhood), size=5) +
coord_flip() +
labs(title="Inference on Ranks of Tract-level KFR in Watts and Compton",
subtitle=subiter,
caption="90% Nominal Coverage")
g
g=ggplot(temp2, aes(x=num,y=get(paste0(outvar, "_mean")), color=nhood)) +
geom_point() +
geom_point(temp2[tract%in%tr_special], mapping=aes(x=ranks, y=ranks, color=Neighborhood), size=5) +
geom_errorbar(aes(ymin=lower, ymax=upper)) +
ylab("KFR p25") +
guides(color=guide_legend(title="Neighborhood")) +
theme(legend.position=c(0.8, 0.2),
axis.text.x=element_blank(),
axis.title.x=element_blank()) +
labs(title="Asymptotic 90% Confidence Intervals for Tracts in Watts and Compton",
subtitle=subiter,
caption="Example tracts enlarged.")
# Create plot with standard 90% confidence intervals around tract estimates
temp2 = temp2[order(get(paste0(outvar, "_mean")))]
temp2[, num:=1:.N]
temp2[, lower:=get(paste0(outvar, "_mean")) - 1.645*sqrt(get(paste0(outvar, "_var")))]
temp2[, upper:=get(paste0(outvar, "_mean")) + 1.645*sqrt(get(paste0(outvar, "_var")))]
g=ggplot(temp2, aes(x=num,y=get(paste0(outvar, "_mean")), color=nhood)) +
geom_point() +
geom_point(temp2[tract%in%tr_special], mapping=aes(x=num, y=get(paste0(outvar, "_mean")), color=nhood), size=5) +
geom_errorbar(aes(ymin=lower, ymax=upper)) +
ylab("KFR p25") +
guides(color=guide_legend(title="Neighborhood")) +
theme(legend.position=c(0.8, 0.2),
axis.text.x=element_blank(),
axis.title.x=element_blank()) +
labs(title="Asymptotic 90% Confidence Intervals for Tracts in Watts and Compton",
subtitle=subiter,
caption="Example tracts enlarged.")
g
# Perform rank-inference on tracts in Watts and Compton
source(paste0(path_code, "/5_watts_compton_tracts.R"))
# Early or late cohort? ("early" or "late")
sample_cohort = "late"
# Prepare data for inference on ranks and All-Watts All-Compton comparison
source(paste0(path_code, "/3_prep_neighb_data.R"))
# Perform rank-inference on tracts in Watts and Compton
source(paste0(path_code, "/5_watts_compton_tracts.R"))
sample_cohort
rm(list=ls())
gc()
# Early or late cohort? ("early" or "late")
sample_cohort = "late"
# png or pdf?
outdev = "png"
# For analyzing tract income ranks, pooled hh income or black hh income?
# ("pooled" or "black")
inc_type = "pooled"
library(data.table)  # Manipulate data
library(rgdal)       # Mapping
library(sf)          # Mapping
library(ggplot2)     # Mapping
library(maptools)    # Mapping (unionSpatialPolygons)
library(csranks)     # Inference on ranks
library(haven)       # Reading Stata data
library(plyr)        # For mapvalues() function
library(stringr)     # For str_pad() function
library(binequality) # For estimating distributions using binned data
path_dropbox = "C:/Users/hab737/Opportunity Insights Dropbox/Opportunity Insights Shared Workspace/Research files"
path_shp     = paste0(path_dropbox, "/outside/finer_geo/data/raw/shape_files")
path_out     = paste0(path_dropbox, "/outside/finer_geo/explore/hb/watts_compton/", sample_cohort)
path_code    = paste0("C:/Users/hab737/Github/finer_geos_outside/explore/winners_curse/LA_watts_compton")
path_raw     = paste0(path_dropbox, "/outside/finer_geo/data/raw/census/data_for_paper")
# Calculate mean household income and variances of sample mean
source(paste0(path_code, "/2_tract_income.R"))
# Prepare data for inference on ranks and All-Watts All-Compton comparison
source(paste0(path_code, "/3_prep_neighb_data.R"))
# Perform rank-inference on tracts in Watts and Compton
source(paste0(path_code, "/5_watts_compton_tracts.R"))
rm(list=ls())
gc()
# Early or late cohort? ("early" or "late")
sample_cohort = "early"
# png or pdf?
outdev = "png"
# For analyzing tract income ranks, pooled hh income or black hh income?
# ("pooled" or "black")
inc_type = "pooled"
library(data.table)  # Manipulate data
library(rgdal)       # Mapping
library(sf)          # Mapping
library(ggplot2)     # Mapping
library(maptools)    # Mapping (unionSpatialPolygons)
library(csranks)     # Inference on ranks
library(haven)       # Reading Stata data
library(plyr)        # For mapvalues() function
library(stringr)     # For str_pad() function
library(binequality) # For estimating distributions using binned data
path_dropbox = "C:/Users/hab737/Opportunity Insights Dropbox/Opportunity Insights Shared Workspace/Research files"
path_shp     = paste0(path_dropbox, "/outside/finer_geo/data/raw/shape_files")
path_out     = paste0(path_dropbox, "/outside/finer_geo/explore/hb/watts_compton/", sample_cohort)
path_code    = paste0("C:/Users/hab737/Github/finer_geos_outside/explore/winners_curse/LA_watts_compton")
path_raw     = paste0(path_dropbox, "/outside/finer_geo/data/raw/census/data_for_paper")
source(paste0(path_code, "/2_tract_income.R"))
# Prepare data for inference on ranks and All-Watts All-Compton comparison
source(paste0(path_code, "/3_prep_neighb_data.R"))
# Perform rank-inference on tracts in Watts and Compton
source(paste0(path_code, "/5_watts_compton_tracts.R"))
rm(list=ls())
gc()
# Early or late cohort? ("early" or "late")
sample_cohort = "late"
# png or pdf?
outdev = "png"
# For analyzing tract income ranks, pooled hh income or black hh income?
# ("pooled" or "black")
inc_type = "pooled"
library(data.table)  # Manipulate data
library(rgdal)       # Mapping
library(sf)          # Mapping
library(ggplot2)     # Mapping
library(maptools)    # Mapping (unionSpatialPolygons)
library(csranks)     # Inference on ranks
library(haven)       # Reading Stata data
library(plyr)        # For mapvalues() function
library(stringr)     # For str_pad() function
library(binequality) # For estimating distributions using binned data
path_dropbox = "C:/Users/hab737/Opportunity Insights Dropbox/Opportunity Insights Shared Workspace/Research files"
path_shp     = paste0(path_dropbox, "/outside/finer_geo/data/raw/shape_files")
path_out     = paste0(path_dropbox, "/outside/finer_geo/explore/hb/watts_compton/", sample_cohort)
path_code    = paste0("C:/Users/hab737/Github/finer_geos_outside/explore/winners_curse/LA_watts_compton")
path_raw     = paste0(path_dropbox, "/outside/finer_geo/data/raw/census/data_for_paper")
source(paste0(path_code, "/2_tract_income.R"))
# Prepare data for inference on ranks and All-Watts All-Compton comparison
source(paste0(path_code, "/3_prep_neighb_data.R"))
# tracts in example
tr_special = c(242600, 542700)
dt[tract%in%tr_special]
sample_cohort=="early"
sample_cohort="early"
# Load data ====================================================================
# Load Atlas data and subset to relevant observations
dt = data.table(read_dta(paste0(path_raw,
"/tract_race_gender_",
sample_cohort,
"_dp.dta"),
col_select=c("state",
"county",
"tract",
"kfr_pooled_pooled_p25",
"kfr_black_male_p25",
"kfr_black_female_p25",
"kfr_pooled_pooled_p25_var",
"kfr_black_male_p25_var",
"kfr_black_female_p25_var",
"kid_pooled_pooled_blw_p50_n")))
dt[is.na(kfr_black_male_p25)]
table(is.na(dt[is.na(kfr_black_male_p25)]$kfr_black_male_p25))
table(is.na(dt[is.na(kfr_black_male_p25_var)]$kfr_black_male_p25))
is.na(c(a,b,c))
is.na(c(1,2,3))
sample_cohort="late"
# Load data ====================================================================
# Load Atlas data and subset to relevant observations
dt = data.table(read_dta(paste0(path_raw,
"/tract_race_gender_",
sample_cohort,
"_dp.dta"),
col_select=c("state",
"county",
"tract",
"kfr_pooled_pooled_p25",
"kfr_black_male_p25",
"kfr_black_female_p25",
"kfr_pooled_pooled_p25_var",
"kfr_black_male_p25_var",
"kfr_black_female_p25_var",
"kid_pooled_pooled_blw_p50_n")))
table(is.na(dt[is.na(kfr_black_male_p25_var)]$kfr_black_male_p25))
5800/(5800+38803)
getwd()
library(devtools)
library(roxygen2)
setwd(..)
setwd("..")
getwd()
setwd("GitHub")
getwd()
setwd("smoov")
devtools::create("C:/Users/hab737/GitHub/smoov")
document()
?smoov
document()
?smoov
?new.env
#'
#' @param shape
#'     Character string; Provide level of map geography e.g. county.
#'     See details below for more information
#' @param data
#'
#' @param ...
#'     Optional parameters depending on choice of \code{shape}
#'
#'
smoov = function(shape, ...){
arguments = list(...)
print(arguments)
# Create smoov environment if it does not already exist
if(!exists(.smoov_env)){
.smoov_env = new.env()
}
# Load shape files separately depending on level of geography
if(shape%in%c("state", "states")){
}else if(shape%in%c("county","counties")){
}else if(shape%in%c("tract", "tracts")){
}
}
smoov("hello", tractyear=2010)
smoov("hello", tractyear=2010)
#'
#' @param shape
#'     Character string; Provide level of map geography e.g. county.
#'     See details below for more information
#' @param data
#'
#' @param ...
#'     Optional parameters depending on choice of \code{shape}
#'
#'
smoov = function(shape, ...){
arguments = list(...)
print(arguments)
# Create smoov environment if it does not already exist
if(!exists(".smoov_env")){
.smoov_env = new.env()
}
# Load shape files separately depending on level of geography
if(shape%in%c("state", "states")){
}else if(shape%in%c("county","counties")){
}else if(shape%in%c("tract", "tracts")){
}
}
smoov("hello", tractyear=2010)
#'
#' @param shape
#'     Character string; Provide level of map geography e.g. county.
#'     See details below for more information
#' @param data
#'
#' @param ...
#'     Optional parameters depending on choice of \code{shape}
#'
#'
smoov = function(shape, ...){
arguments = list(...)
return(arguments)
# Create smoov environment if it does not already exist
if(!exists(".smoov_env")){
.smoov_env = new.env()
}
# Load shape files separately depending on level of geography
if(shape%in%c("state", "states")){
}else if(shape%in%c("county","counties")){
}else if(shape%in%c("tract", "tracts")){
}
}
test = smoov("tract", tractyear=2010)
test
names(test)
test["tractyear"]
unlist(test["tractyear"])
test[["tractyear"]]
library(rgdal)       # Mapping
library(sf)          # Mapping
?assign
?exists
?withr
Sys.getenv("R_PROFILE_USER")
usethis::edit_r_profile()
